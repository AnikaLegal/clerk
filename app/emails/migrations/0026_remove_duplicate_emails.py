# Generated by Django 5.1.1 on 2025-09-15 11:57

from django.db import migrations
from django.db.models import Q
from emails.models import Email, EmailAttachment
from utils.signals import DisableSignals


def _get_uploaded_attachment_count(attachments: list[EmailAttachment]) -> int:
    return len([a for a in attachments if a.sharepoint_state == "UPLOADED"])


def _get_email_to_keep(emails: list[Email]) -> Email | None:
    # Keep the email with the most uploaded attachments or, if there are no
    # uploaded attachments, the oldest creation date.
    return min(
        emails,
        key=lambda email: (
            -_get_uploaded_attachment_count(list(email.attachments.all())),  # type: ignore
            email.created_at,
        ),
        default=None,
    )


def _delete_duplicate_emails(apps, schema_editor):
    Email = apps.get_model("emails", "Email")

    with DisableSignals():
        for thread in (
            Email.objects.filter(received_data__isnull=False)
            .order_by("issue", "thread_name", "received_data_hash")
            .distinct("issue", "thread_name", "received_data_hash")
            .iterator()
        ):
            emails = (
                Email.objects.filter(
                    issue=thread.issue,
                    thread_name=thread.thread_name,
                    received_data_hash=thread.received_data_hash,
                )
                .filter(Q(state="INGESTED") | Q(state="INGEST_FAILURE"))
                .order_by("created_at")
            )
            if emails.count() > 1:
                email_to_keep = _get_email_to_keep(list(emails))
                if not email_to_keep:
                    raise Exception("Logic error: expected to find an email to keep")
                for email in emails.iterator():
                    if email.pk != email_to_keep.pk:
                        email.delete()


class Migration(migrations.Migration):
    dependencies = [
        ("emails", "0025_email_received_data_hash_alter_email_state"),
    ]

    operations = [
        migrations.RunPython(_delete_duplicate_emails),
    ]
