# Generated by Django 5.1.1 on 2025-02-14 01:44

import django.db.models.deletion
import django.utils.timezone
import utils.uploads
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("core", "0075_alter_issueevent_event_type"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="TaskGroup",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "modified_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("name", models.CharField(max_length=64)),
            ],
            options={
                "verbose_name": "group",
            },
        ),
        migrations.CreateModel(
            name="TaskTemplate",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "modified_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("MANAGE", "Manage the case file"),
                            ("CHECK", "Check for conflict/eligibility"),
                            ("CONTACT", "Contact client or other party"),
                            ("DRAFT", "Draft document or advice"),
                            ("REVIEW", "Review document or advice"),
                            ("SEND", "Send document or advice"),
                            ("OTHER", "Other"),
                        ],
                        max_length=32,
                    ),
                ),
                ("name", models.CharField(max_length=64)),
                ("description", models.TextField(blank=True, default="")),
                ("due_in", models.IntegerField(blank=True, default=None, null=True)),
                ("is_urgent", models.BooleanField(default=False)),
                ("is_approval_required", models.BooleanField(default=False)),
            ],
            options={
                "verbose_name": "template",
            },
        ),
        migrations.CreateModel(
            name="TaskTrigger",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "modified_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("name", models.CharField(max_length=128)),
                (
                    "topic",
                    models.CharField(
                        choices=[
                            ("ANY", "Any"),
                            ("REPAIRS", "Repairs"),
                            ("BONDS", "Bonds"),
                            ("EVICTION", "Eviction"),
                            ("HEALTH_CHECK", "Housing Health Check"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "event",
                    models.CharField(
                        choices=[
                            ("CREATE", "Created"),
                            ("LAWYER", "Lawyer assigned"),
                            ("PARALEGAL", "Paralegal assigned"),
                            ("STAGE", "Stage change"),
                            ("OPEN", "Open change"),
                        ],
                        max_length=32,
                    ),
                ),
                (
                    "event_stage",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("UNSTARTED", "Not started"),
                            ("CLIENT_AGREEMENT", "Client agreement"),
                            ("ADVICE", "Drafting advice"),
                            ("FORMAL_LETTER", "Formal letter sent"),
                            ("NEGOTIATIONS", "Negotiations"),
                            ("VCAT_CAV", "VCAT/CAV"),
                            ("POST_CASE_INTERVIEW", "Post-case interview"),
                            ("CLOSED", "Closed"),
                        ],
                        default=None,
                        max_length=32,
                        null=True,
                    ),
                ),
                (
                    "tasks_assignment_role",
                    models.CharField(
                        choices=[
                            ("PARALEGAL", "Paralegal"),
                            ("LAWYER", "Lawyer"),
                            ("COORDINATOR", "Coordinators"),
                        ],
                        max_length=32,
                    ),
                ),
            ],
            options={
                "verbose_name": "trigger",
            },
        ),
        migrations.CreateModel(
            name="Task",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "modified_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                (
                    "type",
                    models.CharField(
                        choices=[
                            ("MANAGE", "Manage the case file"),
                            ("CHECK", "Check for conflict/eligibility"),
                            ("CONTACT", "Contact client or other party"),
                            ("DRAFT", "Draft document or advice"),
                            ("REVIEW", "Review document or advice"),
                            ("SEND", "Send document or advice"),
                            ("OTHER", "Other"),
                            ("QUESTION", "Question"),
                            ("APPROVAL", "Approval request"),
                        ],
                        max_length=32,
                    ),
                ),
                ("name", models.TextField()),
                ("description", models.TextField(blank=True, default="")),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NOT_STARTED", "Not started"),
                            ("IN_PROGRESS", "In progress"),
                            ("DONE", "Done"),
                            ("NOT_DONE", "Not done"),
                        ],
                        default="NOT_STARTED",
                        max_length=32,
                    ),
                ),
                ("due_at", models.DateField(blank=True, default=None, null=True)),
                (
                    "closed_at",
                    models.DateTimeField(blank=True, default=None, null=True),
                ),
                ("is_urgent", models.BooleanField(default=False)),
                ("is_approval_required", models.BooleanField(default=False)),
                ("is_open", models.BooleanField(default=True)),
                ("is_suspended", models.BooleanField(default=False)),
                ("is_approved", models.BooleanField(default=False)),
                ("is_notify_pending", models.BooleanField(default=False)),
                ("is_system_update", models.BooleanField(default=False)),
                (
                    "assignee_role",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("PARALEGAL", "Paralegal"),
                            ("LAWYER", "Lawyer"),
                            ("COORDINATOR", "Coordinators"),
                        ],
                        default=None,
                        max_length=32,
                        null=True,
                    ),
                ),
                ("group_order", models.IntegerField(default=-1)),
                (
                    "assigned_to",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "issue",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.issue"
                    ),
                ),
                (
                    "requesting_task",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="requests",
                        to="task.task",
                    ),
                ),
                (
                    "group",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="task.taskgroup",
                    ),
                ),
                (
                    "template",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        to="task.tasktemplate",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="TaskComment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "modified_at",
                    models.DateTimeField(default=django.utils.timezone.now),
                ),
                ("text", models.TextField()),
                (
                    "creator",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT,
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="task.task",
                    ),
                ),
            ],
            options={
                "verbose_name": "comment",
            },
        ),
        migrations.CreateModel(
            name="TaskAttachment",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("file", models.FileField(upload_to=utils.uploads.get_s3_key)),
                ("content_type", models.CharField(max_length=128)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="attachments",
                        related_query_name="attachment",
                        to="task.task",
                    ),
                ),
                (
                    "comment",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="task.taskcomment",
                    ),
                ),
            ],
            options={
                "verbose_name": "attachment",
            },
        ),
        migrations.CreateModel(
            name="TaskEvent",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "type",
                    models.TextField(
                        choices=[
                            ("REASSIGN", "Reassign"),
                            ("RESUME", "Resume"),
                            ("STATUS_CHANGE", "Status Change"),
                            ("SUSPEND", "Suspend"),
                        ]
                    ),
                ),
                ("data", models.JSONField()),
                ("note_html", models.TextField(null=True)),
                ("created_at", models.DateTimeField(default=django.utils.timezone.now)),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="+",
                        to="task.task",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="+",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "event",
            },
        ),
        migrations.AddField(
            model_name="tasktemplate",
            name="trigger",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="templates",
                related_query_name="template",
                to="task.tasktrigger",
            ),
        ),
        migrations.CreateModel(
            name="TaskActivity",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("object_id", models.PositiveIntegerField()),
                ("created_at", models.DateTimeField()),
                (
                    "content_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "task",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="activities",
                        related_query_name="activity",
                        to="task.task",
                    ),
                ),
            ],
            options={
                "verbose_name": "activity",
                "verbose_name_plural": "activities",
                "indexes": [
                    models.Index(
                        fields=["content_type", "object_id"],
                        name="task_taskac_content_4b713d_idx",
                    )
                ],
            },
        ),
        migrations.AlterOrderWithRespectTo(
            name="tasktemplate",
            order_with_respect_to="trigger",
        ),
    ]
