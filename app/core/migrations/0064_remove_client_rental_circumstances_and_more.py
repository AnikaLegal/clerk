# Generated by Django 4.0.10 on 2024-01-29 02:43

from django.db import migrations, models

import logging
from pathlib import Path

LOGGER = logging.getLogger("migration")
NAME = Path(__file__).stem


def _migrate_rental_circumstances_to_tenancy(apps, schema_editor):
    Client = apps.get_model("core", "Client")
    Issue = apps.get_model("core", "Issue")

    LOGGER.info("Migration: %s", NAME)

    for client in Client.objects.all():
        if client.rental_circumstances is not None:
            issues = Issue.objects.filter(client=client)

            # The client has multiple issues. We don't which one the rental
            # circumstances "belongs" to, so we make a note.
            if issues.count() > 1:
                LOGGER.info("%s: CLIENT %s - MULTIPLE_ISSUES", NAME, client.pk)

            for issue in issues:
                issue.tenancy.rental_circumstances = client.rental_circumstances
                issue.tenancy.save()


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0063_remove_client_referrer_remove_client_referrer_type_and_more"),
    ]

    operations = [
        migrations.AddField(
            model_name="tenancy",
            name="rental_circumstances",
            field=models.CharField(
                blank=True,
                choices=[
                    ("SOLO", "Renting solo"),
                    ("FLATMATES", "Renting with flatmates"),
                    ("PARTNER", "Renting with a partner"),
                    ("FAMILY", "Renting with family"),
                    ("OTHER", "Other"),
                ],
                default="",
                max_length=32,
            ),
        ),
        migrations.RunPython(
            _migrate_rental_circumstances_to_tenancy, reverse_code=migrations.RunPython.noop
        ),
        migrations.RemoveField(
            model_name="client",
            name="rental_circumstances",
        ),
    ]
