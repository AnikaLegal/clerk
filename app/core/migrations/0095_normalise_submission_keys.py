# Generated by Django 5.1.1 on 2025-10-10 00:29

from django.db import migrations
from utils.signals import DisableSignals
import copy


def move_or_discard_key(old_key: str, new_key: str, answers: dict):
    if old_key in answers:
        if answers[old_key] is None:
            answers.pop(old_key)
            return
        if new_key in answers and answers[new_key] != answers[old_key]:
            raise Exception(f"Both {old_key} and {new_key} are present in answers")
        answers[new_key] = answers.pop(old_key)


def discard_empty_key(key: str, answers: dict):
    if key in answers:
        if answers[key] is not None:
            raise Exception(f"{key} should be empty; found {answers[key]}")
        answers.pop(key)


def replace_boolean_value_with_string(
    key: str, true_value: str, false_value: str, answers: dict
):
    if key in answers and isinstance(answers[key], bool):
        if answers[key] is True:
            answers[key] = true_value
        else:
            answers[key] = false_value


def replace_value(key: str, old_value: str, new_value: str, answers: dict):
    if key in answers:
        if isinstance(answers[key], list):
            if new_value in answers[key]:
                # just remove the old value if the new value is already present
                answers[key] = [value for value in answers[key] if value != old_value]
            else:
                answers[key] = [
                    new_value if value == old_value else value for value in answers[key]
                ]
        elif answers[key] == old_value:
            answers[key] = new_value


def change_key_prefix(old_prefix: str, new_prefix: str, answers: dict):
    for key in list(answers.keys()):
        if key.startswith(old_prefix):
            new_key = new_prefix + key[len(old_prefix) :]
            if new_key in answers:
                raise Exception(f"Both {key} and {new_key} are present in answers")
            answers[new_key] = answers.pop(key)


def _normalise_submission_keys(apps, schema_editor):
    with DisableSignals():
        Submission = apps.get_model("core", "Submission")
        for submission in Submission.objects.all():
            copy_of_answers = copy.deepcopy(submission.answers)

            # Fix misspelled key. cSpell:ignore AVAILIBILITY
            move_or_discard_key("AVAILIBILITY", "AVAILABILITY", copy_of_answers)

            # Fix non-AU spelling.
            move_or_discard_key(
                "LEGAL_CENTER_REFERRER", "LEGAL_CENTRE_REFERRER", copy_of_answers
            )

            # Fix two keys that were changed to use the same key.
            # Some specific logic is needed to handle the case where both keys are present.
            if "GENDER_DETAILS" in copy_of_answers:
                if copy_of_answers["GENDER_DETAILS"] is None:
                    copy_of_answers.pop("GENDER_DETAILS")
                else:
                    if (
                        "GENDER" in copy_of_answers
                        and copy_of_answers["GENDER"] == "other"
                    ):
                        copy_of_answers.pop("GENDER")
                    move_or_discard_key("GENDER_DETAILS", "GENDER", copy_of_answers)

            # Fix legacy choice ans values that ware renamed.
            move_or_discard_key(
                "CHARITY_REFERRER", "COMMUNITY_ORGANISATION_REFERRER", copy_of_answers
            )
            replace_value(
                "REFERRER_TYPE",
                "CHARITY",
                "COMMUNITY_ORGANISATION",
                copy_of_answers,
            )

            # Handle legacy boolean values that were changed to choice fields.
            replace_boolean_value_with_string(
                "IS_ABORIGINAL_OR_TORRES_STRAIT_ISLANDER",
                "YES_CONFIRM",
                "NO",
                copy_of_answers,
            )
            replace_boolean_value_with_string(
                "INTERPRETER", "YES_CONFIRM", "NO", copy_of_answers
            )
            replace_boolean_value_with_string(
                "IS_ON_LEASE", "YES", "NO", copy_of_answers
            )

            # Remove unused legacy fields.
            discard_empty_key("EVICTIONS_DOC_DELIVERY_METHOD_FORM_15", copy_of_answers)
            discard_empty_key("EVICTIONS_DOC_DELIVERY_METHOD_FORM_16", copy_of_answers)
            discard_empty_key("EVICTIONS_DOC_DELIVERY_TIME_FORM_15", copy_of_answers)
            discard_empty_key("EVICTIONS_DOC_DELIVERY_TIME_FORM_16", copy_of_answers)

            # Convert all keys that start with "EVICTIONS_" to "EVICTION_ARREARS_"
            change_key_prefix("EVICTIONS_", "EVICTION_ARREARS_", copy_of_answers)

            # Convert ISSUES value EVICTION to EVICTION_ARREARS
            replace_value("ISSUES", "EVICTION", "EVICTION_ARREARS", copy_of_answers)

            # Correct known incorrect value due to bug.
            replace_value("INTERPRETER", "chinese", "UNKNOWN", copy_of_answers)

            if copy_of_answers != submission.answers:
                submission.answers = copy_of_answers
                submission.save()


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0094_issue_submission"),
    ]

    operations = [
        migrations.RunPython(
            _normalise_submission_keys,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
