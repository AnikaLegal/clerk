# Generated by Django 4.0.10 on 2023-11-27 04:22

from django.db import migrations
from django.utils.timezone import localtime

import logging
from pathlib import Path

LOGGER = logging.getLogger("migration")
NAME = Path(__file__).stem


def _relate_tenancy_to_case(apps, schema_editor):
    Issue = apps.get_model("core", "Issue")
    Tenancy = apps.get_model("core", "Tenancy")

    LOGGER.info("Migration: %s", NAME)

    for issue in Issue.objects.all():
        tenancy = issue.client.tenancy_set
        if tenancy.count() > 1:
            ids = list(tenancy.values_list("pk", flat=True))
            LOGGER.info(
                "%s: ISSUE %s - MULTIPLE_TENANCIES - %s",
                NAME,
                issue.pk,
                ", ".join(map(str, ids)),
            )

            # Look for a tenancy created at roughly the same time as the case.
            created_at = localtime(issue.created_at)
            tenancy = issue.client.tenancy_set.filter(
                created_at__date=created_at,
                created_at__hour=created_at.hour,
                created_at__minute=created_at.minute,
            )
            if tenancy.count() != 1:
                # Just use the first tenancy (see below) if we can't relate
                # one to the issue.
                LOGGER.info("%s: ISSUE %s - NO_RELATED_TENANCIES", NAME, issue.pk)
                tenancy = issue.client.tenancy_set

            LOGGER.info(
                "%s: ISSUE %s - TENANCY_USED %s", NAME, issue.pk, tenancy.first().pk
            )

        issue.tenancy = tenancy.first()
        if not issue.tenancy:
            LOGGER.info("ISSUE: {} - NO_TENANCY".format(issue.pk))
            # So the soon-to-be not-null condition of the field is satisfied.
            issue.tenancy = Tenancy()
            issue.tenancy.client = issue.client
            issue.tenancy.save()
        issue.save()


class Migration(migrations.Migration):
    dependencies = [
        ("core", "0057_issue_tenancy"),
    ]

    operations = [
        migrations.RunPython(
            _relate_tenancy_to_case, reverse_code=migrations.RunPython.noop
        ),
    ]
